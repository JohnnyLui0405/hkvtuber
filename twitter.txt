import tweepy
import discord
import asyncio
from discord.ext import commands, tasks
from decouple import config
from urllib3.exceptions import ProtocolError

consumer_key = config("consumer_key")
consumer_secret = config("consumer_secret")
access_token = config("access_token")
access_token_secret = config("access_token_secret")
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

idlist = []

# def from_creator(status):
#     if hasattr(status, 'retweeted_status'):
#         return False
#     elif status.in_reply_to_status_id != None:
#         return False
#     elif status.in_reply_to_screen_name != None:
#         return False
#     elif status.in_reply_to_user_id != None:
#         return False
#     else:
#         return True


class twitter(commands.Cog):

    def __init__(self, bot):
        """Twitter Notification"""
        self.bot = bot
        self.oldData = None
        self.Data = []

    async def tweet_send(self, Id):
        tweet_url = "https://twitter.com/Yuna_Kurata/status/{}".format(Id)
        channel_id = 831835531952390174
        channel = self.bot.get_channel(channel_id)
        await channel.send(f"{tweet_url}")

    @commands.Cog.listener()
    async def on_ready(self):
        self.newTweetCheck.start()
        myStreamListener = self.MyStreamListener(api)
        myStream = tweepy.Stream(auth = api.auth, listener=myStreamListener)
        print(myStream.running)
        print("TweetCheck started")
        await self.bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="Yuna未來既直播"))
        while True:
            if not myStream.running:
                print(myStream.running)
                await asyncio.sleep(5)
                myStream.filter(follow=["1356442231956140033"],is_async=True)
                print("Starting Stream")
            
            else:
                await asyncio.sleep(5)
        
    @tasks.loop(seconds=5)
    async def newTweetCheck(self):
        while idlist != []:
            Id = idlist.pop(0)
            await self.tweet_send(Id)

    class MyStreamListener(tweepy.StreamListener):
        def __init__(self, api):
            """Tweepy"""
            self.api = api
            self.me = api.me()

        def on_status(self, status):
            print(status.user.id_str)
            if status.user.id_str == "1356442231956140033":
                idlist.append(status.id_str)

        def on_error(self, status):
            print("Error detected")

    @commands.command()
    async def say(self, ctx, msg):
      if ctx.author.id == 334534960654450690:
        await ctx.message.delete()
        await ctx.send(msg)
        

        
        


def setup(bot):
    bot.add_cog(twitter(bot))

